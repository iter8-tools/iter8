// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: sdk/sdk.proto

package sdk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SDKClient is the client API for SDK service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SDKClient interface {
	// Return a variant number for the given RequestMeta (subject/user ID combination)
	//
	// If the input is invalid, or if there is no valid variant, then an empty Variant is returned
	// along with an error status
	GetRoute(ctx context.Context, in *RequestMeta, opts ...grpc.CallOption) (*Variant, error)
	// Record a route in Iter8 storage
	SetRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Record a counter metric value in Iter8 storage
	// Metrics recorded by this API correspond to business metrics of an app related to an end-user,
	// for example, value of shopping cart purchased by some user of a shopping app in a transaction
	WriteUserMetric(ctx context.Context, in *Counter, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Record a metric blob in Iter8 storage
	// Blobs recorded by this API correspond to output of performance testing tools,
	// for example, serialized JSON output produced by Fortio or ghz
	WriteMetricBlob(ctx context.Context, in *Blob, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sDKClient struct {
	cc grpc.ClientConnInterface
}

func NewSDKClient(cc grpc.ClientConnInterface) SDKClient {
	return &sDKClient{cc}
}

func (c *sDKClient) GetRoute(ctx context.Context, in *RequestMeta, opts ...grpc.CallOption) (*Variant, error) {
	out := new(Variant)
	err := c.cc.Invoke(ctx, "/sdk.SDK/GetRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDKClient) SetRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/sdk.SDK/SetRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDKClient) WriteUserMetric(ctx context.Context, in *Counter, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/sdk.SDK/WriteUserMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDKClient) WriteMetricBlob(ctx context.Context, in *Blob, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/sdk.SDK/WriteMetricBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SDKServer is the server API for SDK service.
// All implementations must embed UnimplementedSDKServer
// for forward compatibility
type SDKServer interface {
	// Return a variant number for the given RequestMeta (subject/user ID combination)
	//
	// If the input is invalid, or if there is no valid variant, then an empty Variant is returned
	// along with an error status
	GetRoute(context.Context, *RequestMeta) (*Variant, error)
	// Record a route in Iter8 storage
	SetRoute(context.Context, *Route) (*emptypb.Empty, error)
	// Record a counter metric value in Iter8 storage
	// Metrics recorded by this API correspond to business metrics of an app related to an end-user,
	// for example, value of shopping cart purchased by some user of a shopping app in a transaction
	WriteUserMetric(context.Context, *Counter) (*emptypb.Empty, error)
	// Record a metric blob in Iter8 storage
	// Blobs recorded by this API correspond to output of performance testing tools,
	// for example, serialized JSON output produced by Fortio or ghz
	WriteMetricBlob(context.Context, *Blob) (*emptypb.Empty, error)
	mustEmbedUnimplementedSDKServer()
}

// UnimplementedSDKServer must be embedded to have forward compatible implementations.
type UnimplementedSDKServer struct {
}

func (UnimplementedSDKServer) GetRoute(context.Context, *RequestMeta) (*Variant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}
func (UnimplementedSDKServer) SetRoute(context.Context, *Route) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoute not implemented")
}
func (UnimplementedSDKServer) WriteUserMetric(context.Context, *Counter) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteUserMetric not implemented")
}
func (UnimplementedSDKServer) WriteMetricBlob(context.Context, *Blob) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteMetricBlob not implemented")
}
func (UnimplementedSDKServer) mustEmbedUnimplementedSDKServer() {}

// UnsafeSDKServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SDKServer will
// result in compilation errors.
type UnsafeSDKServer interface {
	mustEmbedUnimplementedSDKServer()
}

func RegisterSDKServer(s grpc.ServiceRegistrar, srv SDKServer) {
	s.RegisterService(&SDK_ServiceDesc, srv)
}

func _SDK_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDKServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.SDK/GetRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDKServer).GetRoute(ctx, req.(*RequestMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDK_SetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Route)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDKServer).SetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.SDK/SetRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDKServer).SetRoute(ctx, req.(*Route))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDK_WriteUserMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Counter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDKServer).WriteUserMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.SDK/WriteUserMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDKServer).WriteUserMetric(ctx, req.(*Counter))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDK_WriteMetricBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDKServer).WriteMetricBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.SDK/WriteMetricBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDKServer).WriteMetricBlob(ctx, req.(*Blob))
	}
	return interceptor(ctx, in, info, handler)
}

// SDK_ServiceDesc is the grpc.ServiceDesc for SDK service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SDK_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdk.SDK",
	HandlerType: (*SDKServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoute",
			Handler:    _SDK_GetRoute_Handler,
		},
		{
			MethodName: "SetRoute",
			Handler:    _SDK_SetRoute_Handler,
		},
		{
			MethodName: "WriteUserMetric",
			Handler:    _SDK_WriteUserMetric_Handler,
		},
		{
			MethodName: "WriteMetricBlob",
			Handler:    _SDK_WriteMetricBlob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sdk/sdk.proto",
}
