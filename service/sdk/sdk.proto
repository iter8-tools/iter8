// protoc --go_out=. --go_opt=paths=source_relative     --go-grpc_out=. --go-grpc_opt=paths=source_relative     abn/grpc/abn.proto
// python -m grpc_tools.protoc -I../../../iter8-tools/iter8/abn/grpc --python_out=. --grpc_python_out=. ../../../iter8-tools/iter8/abn/grpc/abn.proto 

syntax = "proto3";

option go_package = "github.com/iter8-tools/iter8/services/sdk";

package sdk;

import "google/protobuf/empty.proto";

service SDK {
  // Return a variant number for the given RequestMeta (subject/user ID combination)
  // 
  // If the input is invalid, or if there is no valid variant, then an empty Variant is returned
  // along with an error status
  rpc GetRoute(RequestMeta) returns(Variant) {}

  // Record a route in Iter8 storage
  rpc SetRoute(Route) returns (google.protobuf.Empty) {}

  // Record a counter metric value in Iter8 storage
  // Metrics recorded by this API correspond to business metrics of an app related to an end-user,
  // for example, value of shopping cart purchased by some user of a shopping app in a transaction
  rpc WriteUserMetric(Counter) returns (google.protobuf.Empty) {}

  // Record a metric blob in Iter8 storage
  // Blobs recorded by this API correspond to output of performance testing tools, 
  // for example, serialized JSON output produced by Fortio or ghz
  rpc WriteMetricBlob(Blob) returns (google.protobuf.Empty) {}

}

message RequestMeta {
  // fully qualified subject name
  string subject = 1;
  // user ID
  string user = 2;
}

message Variant {
  // variant number
  int32 number = 1;
}

message Route {
  // fully qualified subject name
  string subject = 1;
  // user ID
  string user = 2;
  // variant number
  int32 number = 3;
}

message Counter {
  // metric provider, e.g., awesome-frontend
  string provider = 1;
  // metric name
  string metric = 2;
  // metric value
  double value = 3;
  // fully qualified subject name
  string subject = 4;
  // user ID
  string user = 5;
}

message Blob {
  // blob provider, e.g., fortio or ghz
  string provider = 1;
  // blob value
  bytes value = 2;
  // fully qualified subject name
  string subject = 3;
  // variant number
  int32 number = 4;
}