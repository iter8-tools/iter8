{{- if .Values.candidate }}
apiVersion: iter8.tools/v2alpha2
kind: Experiment
metadata:
{{- if .Values.candidate.dynamic.id }}
  annotations:
    # iter8.candidate.id is useful for preventing race conditions during experiments
    # especially, when Iter8 automatically promotes candidate versions
    iter8.candidate.id: {{ .Values.candidate.dynamic.id }}
{{- end }}
{{- /*
  this create an experiment of with a name such as hello-experiment-71s20
*/}}
  # the sha256sum suffix based on candidate is useful; it ensures that 
  # a new experiment is generated whenever the candidate version is updated 
  # (for example, by CD pipeline)
  name: {{ required ".Values.common.application is required!" .Values.common.application }}-experiment-{{ required ".Values.candidate is required!" .Values.candidate | toString | sha256sum | trunc 5 }}
spec:
  # target should uniquely identify the application under experimentation
  target: {{ .Values.common.application }}
  strategy:
    # this experiment will perform an A/B test
    testingPattern: A/B
    # this experiment will progressively shift traffic to the winning version
    deploymentPattern: FixedSplit
    actions:
      start:
      # ensure candidate service and deployment of the application are available
      - task: common/readiness 
        with:
          objRefs:
          - kind: Service
            name: {{required ".Values.candidate.name is required!" .Values.candidate.name }}
            namespace: {{ .Release.Namespace}}
          - kind: Deployment
            name: {{ .Values.candidate.name }}
            namespace: {{ .Release.Namespace}}
            waitFor: condition=available
      - run: sleep 20.0 
      # collect Iter8's built-in metrics
      - task: metrics/collect
        with:
          time: {{required ".Values.experiment.time is required!" .Values.experiment.time | quote }}
          versions:
          - name: new-version # this name must match the name of a version in versionInfo
            url: "http://{{ .Values.baseline.name }}.{{ .Release.Namespace }}:{{ .Values.common.servicePortInfo.port }}"
            qps: {{required ".Values.experiment.QPS is required!" .Values.experiment.QPS }}
  criteria:
    rewards:
    # (business) reward metric to optimize in this experiment
    - metric: {{ .Release.Namespace }}/user-engagement
      preferredDirection: {{required ".Values.experiment.userEngagementDirection is required!" .Values.experiment.userEngagementDirection | quote }}
    objectives: # used for validating versions
    - metric: {{ .Release.Namespace }}/mean-latency
      upperLimit: {{required ".Values.experiment.limitMeanLatency is required!" .Values.experiment.limitMeanLatency | quote }}
    - metric: {{ .Release.Namespace }}/error-rate
      upperLimit: {{required ".Values.experiment.limitErrorRate is required!" .Values.experiment.limitErrorRate | quote }}
    requestCount: {{ .Release.Namespace }}/request-count
  duration: # product of fields determines length of the experiment
    intervalSeconds: 10
    iterationsPerLoop: 10
  versionInfo:
    baseline:
      name: {{ .Values.baseline.name }}
    candidates:
    - name: {{ .Values.candidate.name }}
{{ end -}}