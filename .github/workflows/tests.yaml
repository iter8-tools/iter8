name: tests

on:
  push:
  pull_request:

jobs:
  unit-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.16', '1.17' ]
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go }}
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Test and compute coverage
      run: make coverage # includes vet and lint
    - name: Enforce coverage
      run: |
        export COVERAGE=$(go tool cover -func coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "code coverage is at ${COVERAGE}"
        if [ 1 -eq "$(echo "${COVERAGE} > 67.0" | bc)" ]; then \
          echo "all good... coverage is above 67.0%"; 
        else \
          echo "not good... coverage is not above 67.0%";
          exit 1
        fi
    - name: Upload coverage to Codecov
      if: github.event_name == 'push'
      uses: codecov/codecov-action@v2
      with:
        files: ./coverage.out

  static-check:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - uses: dominikh/staticcheck-action@v1.1.0

  e2e-tests-httpbin:
    name: local httpbin tests
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Checkout repository
      uses: actions/checkout@v2
    
    - run: make install

    - name: run httpbin
      run: |
        set -e
        docker pull kennethreitz/httpbin
        docker run -p 80:80 kennethreitz/httpbin &
        while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://127.0.0.1/get)" != "200" ]]; do
          sleep 5; 
        done;

    - name: load test GET endpoint
      run: |
        set -e
        cd hub/load-test
        iter8 run --set url=http://127.0.0.1/get
        iter8 assert -c completed -c nofailure -c slos

    - name: load test POST endpoint (application/octet-stream)
      run: |
        set -e
        cd hub/load-test
        iter8 run --set url=http://127.0.0.1/post \
                  --set payloadStr="abc123"                  
        iter8 assert -c completed -c nofailure -c slos

    - name: load test POST endpoint (text/plain)
      run: |
        set -e
        cd hub/load-test
        iter8 run --set url=http://127.0.0.1/post \
                  --set payloadStr="abc123" \
                  --set contentType="text/plain"
 
    - name: load test POST endpoint (application/json)
      run: |
        set -e
        cd hub/load-test
        iter8 run --set url=http://127.0.0.1/post \
                  --set payloadURL=https://json-generator.com/ \
                  --set contentType="application/json"
        iter8 assert -c completed -c nofailure -c slos

    - name: load test POST endpoint (image/jpeg)
      run: |
        set -e
        cd hub/load-test
        iter8 run --set url=http://127.0.0.1/post \
                  --set payloadURL=https://cdn.pixabay.com/photo/2021/09/08/17/58/poppy-6607526_1280.jpg \
                  --set contentType="image/jpeg"
        iter8 assert -c completed -c nofailure -c slos
