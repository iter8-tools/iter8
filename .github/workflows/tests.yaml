name: tests

on:
  pull_request:

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Test and compute coverage
      run: make coverage # includes vet and lint
    - name: Enforce coverage
      run: |
        export COVERAGE=$(go tool cover -func coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "code coverage is at ${COVERAGE}"
        if [ 1 -eq "$(echo "${COVERAGE} > 74.0" | bc)" ]; then \
          echo "all good... coverage is above 74.0%"; 
        else \
          echo "not good... coverage is not above 74.0%";
          exit 1
        fi
    - name: Upload coverage to Codecov
      if: github.event_name == 'push'
      uses: codecov/codecov-action@v2
      with:
        files: ./coverage.out

  static-check:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - uses: dominikh/staticcheck-action@v1.1.0

  load-test-action:
    name: test load-test action
    runs-on: ubuntu-latest
    steps:

    # Build new version as docker image and push to registry
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: run httpbin
      run: |
        set -e
        docker pull kennethreitz/httpbin
        docker run -p 80:80 kennethreitz/httpbin &
        while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://127.0.0.1/get)" != "200" ]]; do
          sleep 5; 
        done;

    - name: Prepare values.yaml file
      run: |
        cat << EOF > values.yaml
          url: http://127.0.0.1/get
          SLOs:
            error-rate: 0
            latency-mean: 100
        EOF
        cat values.yaml

    - name: Run load test
      uses: ./load-test
      with:
        # chart: load-test-http
        valuesFile: ../values.yaml
        logLevel: trace
