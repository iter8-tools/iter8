name: tests

on:
  pull_request:

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Test and compute coverage
      run: make coverage # includes vet and lint
    - name: Enforce coverage
      run: |
        export COVERAGE=$(go tool cover -func coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "code coverage is at ${COVERAGE}"
        if [ 1 -eq "$(echo "${COVERAGE} > 74.0" | bc)" ]; then \
          echo "all good... coverage is above 74.0%"; 
        else \
          echo "not good... coverage is not above 74.0%";
          exit 1
        fi

  load-test-http:
    name: http load test with payloadURL
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Build and install Iter8
      run: make install
    - name: run httpbin
      run: |
        set -e
        docker pull kennethreitz/httpbin
        docker run -p 80:80 kennethreitz/httpbin &
        HOST_IP=$(ip -f inet addr show docker0 | grep -Po 'inet \K[\d.]+')
        echo "HOST_IP=$HOST_IP" >> $GITHUB_ENV
        while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://$HOST_IP/get)" != "200" ]]; do
          sleep 5; 
        done;
        
    - name: launch load-test-http
      run: |
        iter8 launch -c load-test-http --noDownload \
        --set url="http://$HOST_IP/post" \
        --set payloadURL="https://httpbin.org/stream/1"
    - name: assert experiment completed without failures
      run: |
        iter8 assert -c completed -c nofailure

    - name: launch load-test-http with percentiles, duration, and SLOs
      run: |
        iter8 launch -c load-test-http --noDownload \
        --set url="https://httpbin.org/post" \
        --set payloadURL="https://httpbin.org/stream/1" \
        --set duration="3s" \
        --set percentiles[0]=45.6 \
        --set percentiles[1]=97.5 \
        --set SLOs.http/latency-p'45\.6'=200 \
        --set SLOs.http/latency-p95=500 \
        --set SLOs.http/error-count=0
    - name: assert experiment completed without failures
      run: |
        iter8 assert -c completed -c nofailure -c slos

  load-test-grpc:
    name: gRPC load test with various URLs
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Build and install Iter8
      run: make install
    - name: run greeter
      run: |
        git clone -b v1.43.0 https://github.com/grpc/grpc-go
        cd grpc-go/examples/helloworld
        go build greeter_server/main.go
        ./main &

    - name: load test grpc service with protoURL
      run: |
        set -e
        export LOG_LEVEL=trace
        iter8 launch -c load-test-grpc --noDownload \
          --set host="127.0.0.1:50051" \
          --set call="helloworld.Greeter.SayHello" \
          --set protoURL="https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto" \
          --set data.name="frodo" \
          --set SLOs.grpc/error-rate=0 \
          --set SLOs.grpc/latency/mean=50 \
          --set SLOs.grpc/latency/p90=100 \
          --set SLOs.grpc/latency/p'97\.5'=200
        iter8 assert -c completed -c nofailure -c slos
        
    - name: load test grpc service with proto/data/metadata URLs
      run: |
        set -e
        export LOG_LEVEL=trace
        iter8 launch -c load-test-grpc --noDownload \
          --set host="127.0.0.1:50051" \
          --set call="helloworld.Greeter.SayHello" \
          --set protoURL="https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto" \
          --set dataURL="https://gist.githubusercontent.com/sriumcp/3f3178f4b698af6696c925832e51b0ba/raw/d02aa698d34aa2067f7a2f6afb4ceb616b0db822/name.json" \
          --set metadataURL="https://gist.githubusercontent.com/sriumcp/3f3178f4b698af6696c925832e51b0ba/raw/d02aa698d34aa2067f7a2f6afb4ceb616b0db822/name.json" \
          --set SLOs.grpc/error-rate=0 \
          --set SLOs.grpc/latency/mean=50 \
          --set SLOs.grpc/latency/p90=100 \
          --set SLOs.grpc/latency/p'97\.5'=200
        iter8 assert -c completed -c nofailure -c slos

  gh-action:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: run httpbin
      run: |
        set -e
        docker pull kennethreitz/httpbin
        docker run -p 80:80 kennethreitz/httpbin &
        HOST_IP=$(ip -f inet addr show docker0 | grep -Po 'inet \K[\d.]+')
        echo "HOST_IP=$HOST_IP" >> $GITHUB_ENV
        while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://$HOST_IP/get)" != "200" ]]; do
          sleep 5; 
        done;

    - name: install Iter8 CLI
      uses: ./
    - name: version
      run: | 
        iter8 version
    - name: launch
      run: |
        iter8 launch -c load-test-http --noDownload \
        --set url="http://$HOST_IP/get"
    - name: assert
      run: |
        iter8 assert -c completed -c nofailure

  kubernetes-http-experiment:
    name: http load test inside Kubernetes
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Build and install Iter8
      run: make install
    - uses: engineerd/setup-kind@v0.5.0
      with:
        version: "v0.12.0"    
    - name: k launch load-test-http
      run: |
        iter8 k launch -c load-test-http --noDownload \
        --set url="https://httpbin.org/post" \
        --set payloadURL="https://httpbin.org/stream/1" \
        --set iter8lib.disable.job=true
    - name: k run
      run: |
        iter8 k run --namespace default --group default
    - name: assert experiment completed without failures
      run: |
        iter8 k assert -c completed -c nofailure --timeout 300s
        iter8 k report
        iter8 k delete

  readiness:
    runs-on: ubuntu-latest
    steps:
    - name: Start kind cluster
      uses: helm/kind-action@v1.2.0
      with:
        wait: 300s
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: deploy resources to cluster
      run: |
        kubectl apply -f testdata/manifests/readiness.yaml
        sleep 5
        kubectl get deploy
    - name: Install Iter8
      uses: iter8-tools/iter8@v0.10
    - name: launch load-test-http with readiness checks
      run: |
        iter8 launch -c load-test-http --noDownload \
        --set ready.deploy="test-deployment" \
        --set url="https://httpbin.org/get" \
    - name: assert experiment completed without failures
      run: |
        iter8 assert -c completed -c nofailure

  static-check:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - uses: dominikh/staticcheck-action@v1.1.0
