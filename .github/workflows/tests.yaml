name: tests

on:
  pull_request:

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Test and compute coverage
      run: make coverage # includes vet and lint
    - name: Enforce coverage
      run: |
        export COVERAGE=$(go tool cover -func coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "code coverage is at ${COVERAGE}"
        if [ 1 -eq "$(echo "${COVERAGE} > 76.0" | bc)" ]; then \
          echo "all good... coverage is above 76.0%"; 
        else \
          echo "not good... coverage is not above 76.0%";
          exit 1
        fi

  load-test-http:
    name: http load test with payloadURL
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Build and install Iter8
      run: make install
    - name: run httpbin
      run: |
        set -e
        docker pull kennethreitz/httpbin
        docker run -p 80:80 kennethreitz/httpbin &
        HOST_IP=$(ip -f inet addr show docker0 | grep -Po 'inet \K[\d.]+')
        echo "HOST_IP=$HOST_IP" >> $GITHUB_ENV
        while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://$HOST_IP/get)" != "200" ]]; do
          sleep 5; 
        done;        
    - name: launch experiment
      run: |
        iter8 launch --localChart \
        --chartName testdata/charts/iter8 \
        --set "tasks={http}" \
        --set http.url="http://$HOST_IP/post" \
        --set http.payloadURL="https://httpbin.org/stream/1"
    - name: assert experiment completed without failures
      run: |
        iter8 assert -c completed -c nofailure
    - name: launch experiment
      run: |
        iter8 launch --localChart \
        --chartName testdata/charts/iter8 \
        --set "tasks={http,assess}" \
        --set http.url="http://$HOST_IP/post" \
        --set http.payloadURL="https://httpbin.org/stream/1" \
        --set http.duration="3s" \
        --set assess.SLOs.upper.http/latency-p95=500 \
        --set assess.SLOs.upper.http/error-count=0
    - name: assert experiment completed without failures
      run: |
        iter8 assert -c completed -c nofailure -c slos

  readiness-check-in-a-local-experiment:
    name: http load test local experiment with readiness check
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Build and install Iter8
      run: make install
    - name: Start kind cluster
      uses: helm/kind-action@v1.2.0
      with:
        wait: 300s
    - name: run application
      run: |
        kubectl create deploy httpbin --image=kennethreitz/httpbin --port=80
        kubectl expose deploy httpbin --port=80
    - name: wait for the app to come up
      run: |
        iter8 launch --localChart \
        --chartName testdata/charts/iter8 \
        --set "tasks={ready}" \
        --set ready.deploy=httpbin \
        --set ready.service=httpbin \
        --set ready.timeout=60s
    - name: port forward
      run: |
        kubectl port-forward service/httpbin 8080:80 &
    - name: launch experiment
      run: |
        iter8 launch --localChart \
        --chartName testdata/charts/iter8 \
        --set "tasks={ready,http,assess}" \
        --set ready.deploy=httpbin \
        --set ready.service=httpbin \
        --set ready.timeout=60s \
        --set http.url=http://localhost:8080/get \
        --set http.duration="3s" \
        --set assess.SLOs.upper.http/latency-p95=500 \
        --set assess.SLOs.upper.http/error-count=0

  load-test-grpc:
    name: gRPC load test with various URLs
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Build and install Iter8
      run: make install
    - name: run greeter
      run: |
        git clone -b v1.43.0 https://github.com/grpc/grpc-go
        cd grpc-go/examples/helloworld
        go build greeter_server/main.go
        ./main &

    - name: load test grpc service with protoURL
      run: |
        set -e
        export LOG_LEVEL=trace
        iter8 launch --localChart \
          --chartName testdata/charts/iter8 \
          --set "tasks={grpc,assess}" \
          --set grpc.host="127.0.0.1:50051" \
          --set grpc.call="helloworld.Greeter.SayHello" \
          --set grpc.protoURL="https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto" \
          --set grpc.data.name="frodo" \
          --set assess.SLOs.upper.grpc/error-rate=0 \
          --set assess.SLOs.upper.grpc/latency/mean=50 \
          --set assess.SLOs.upper.grpc/latency/p90=100 \
          --set assess.SLOs.upper.grpc/latency/p'97\.5'=200
        iter8 assert -c completed -c nofailure -c slos
        
    - name: load test grpc service with proto/data/metadata URLs
      run: |
        set -e
        export LOG_LEVEL=trace
        iter8 launch --localChart \
          --chartName testdata/charts/iter8 \
          --set "tasks={grpc,assess}" \
          --set grpc.host="127.0.0.1:50051" \
          --set grpc.call="helloworld.Greeter.SayHello" \
          --set grpc.protoURL="https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto" \
          --set grpc.dataURL="https://gist.githubusercontent.com/sriumcp/3f3178f4b698af6696c925832e51b0ba/raw/d02aa698d34aa2067f7a2f6afb4ceb616b0db822/name.json" \
          --set grpc.metadataURL="https://gist.githubusercontent.com/sriumcp/3f3178f4b698af6696c925832e51b0ba/raw/d02aa698d34aa2067f7a2f6afb4ceb616b0db822/name.json" \
          --set assess.SLOs.upper.grpc/error-rate=0 \
          --set assess.SLOs.upper.grpc/latency/mean=50 \
          --set assess.SLOs.upper.grpc/latency/p90=100 \
          --set assess.SLOs.upper.grpc/latency/p'97\.5'=200
        iter8 assert -c completed -c nofailure -c slos

  kubernetes-http-experiment:
    name: http load test at the edge of Kubernetes
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Build and install Iter8
      run: make install
    - name: run httpbin
      run: |
        set -e
        docker pull kennethreitz/httpbin
        docker run -p 80:80 kennethreitz/httpbin &
        HOST_IP=$(ip -f inet addr show docker0 | grep -Po 'inet \K[\d.]+')
        echo "HOST_IP=$HOST_IP" >> $GITHUB_ENV
        while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://$HOST_IP/get)" != "200" ]]; do
          sleep 5; 
        done;
    - name: Start kind cluster
      uses: helm/kind-action@v1.2.0
      with:
        wait: 300s
    - name: load-test-http in Kubernetes
      run: |
        iter8 k launch --localChart \
        --chartName testdata/charts/iter8 \
        --set "tasks={http,assess}" \
        --set http.url="http://$HOST_IP/get" \
        --set http.duration="3s" \
        --set assess.SLOs.upper.http/latency-p50=200 \
        --set assess.SLOs.upper.http/latency-p90=500 \
        --set assess.SLOs.upper.http/error-count=0 \
        --set runner=none
    - name: k run
      run: |
        iter8 k run --namespace default --group default &
    - name: assert experiment completed without failures and SLOs are satisfied
      run: |
        iter8 k assert -c completed -c nofailure -c slos --timeout 60s
        iter8 k report
        iter8 k delete

# https://github.com/dominikh/staticcheck-action hardcodes go version; update to 1.19 has not yet been
  static-check:
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - uses: dominikh/staticcheck-action@v1.2.0
      with:
        install-go: false
