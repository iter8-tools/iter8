# perform an SLO validation experiment for a dark launched Knative application
# promote the dark launched version if it satisfies SLOs
# this workflow is also documented at https://iter8.tools, 
# as the quick start experiment for Knative
name: kn quickstart

on:
  # this workflow can also be triggered manually
  workflow_dispatch:
  # when code is pushed to master
  push:
    branches:
    - master
    # trigger workflow only if the following paths are affected
    # ignore changes within install/docker folder
    paths:
    - 'install/**'
    - '!install/docker/**'
    - 'helm/knslo'
    - 'samples/setup/**'
    - 'samples/knative/**'
    - '.github/workflows/knquickstart.yaml'
  # of when a PR is submitted
  pull_request:
    # trigger workflow only if the following paths are affected
    # ignore changes within install/docker folder
    paths:
    - 'install/**'
    - '!install/docker/**'
    - 'helm/knslo'
    - 'samples/setup/**'
    - 'samples/knative/**'
    - '.github/workflows/knquickstart.yaml'

jobs:
  # the following job demonstrates and tests 
  # dark launch with SLO validation for a Knative hello world application
  # it uses Helm for packaging the application along with Iter8 experiment
  slovalidation-helmex-knative:
    name: SLO validation experiment for Knative application using Helm
    runs-on: ubuntu-latest

    steps:

    # install Go locally
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16
    
    # checkout the Git repo
    - name: Checkout repository
      uses: actions/checkout@v2
    
    # set up a local Kubernetes cluster using Kind for testing purposes
    - uses: engineerd/setup-kind@v0.5.0
      with:
        version: "v0.11.1"

    # install Iter8 in the K8s cluster
    # install Knative with Kourier networking layer in the K8s cluster
    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/setup/iter8-setup.sh
        $ITER8/samples/knative/quickstart/platform-setup.sh

    # get iter8ctl;
    # among other things, this Iter8 CLI can help verify that 
    # the experiment completed successfully.
    - name: Get iter8ctl
      run: go install github.com/iter8-tools/etc3/iter8ctl@mergerepos


    # install Helm locally
    - name: Get Helm
      uses: azure/setup-helm@v1

    # create baseline version of Knative hello world application
    - name: create baseline version
      run: |
        export ITER8=$(pwd)
        cd $ITER8/helm/knslo
        helm dependency update
        helm install my-app . \
          --set baseline.dynamic.tag="1.0" \
          --set baseline.dynamic.id="v1" \
          --set candidate=null

    - name: wait for baseline version to be ready
      run: kubectl wait ksvc/hello --for=condition=Ready

    # create candidate version of the Knative hello world application
    # this step also creates an Iter8 experiment to validate the candidate version
    - name: create candidate version
      run: |
        export ITER8=$(pwd)
        cd $ITER8/helm/knslo
        helm upgrade my-app . \
          --set baseline.dynamic.tag="1.0" \
          --set baseline.dynamic.id="v1" \
          --set candidate.dynamic.tag="2.0" \
          --set candidate.dynamic.id="v2" \
          --install

    - name: Wait until end of experiment and print experiment yaml
      run: |
        export EXPERIMENT=$(kubectl get experiment -o jsonpath='{.items[0].metadata.name}')
        kubectl wait experiment $EXPERIMENT --for=condition=Completed --timeout=300s
        kubectl get experiment $EXPERIMENT -o yaml
    
    - name: Check if experiment is complete and found a winner
      run: iter8ctl assert -c completed -c winnerFound
