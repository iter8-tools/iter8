name: Check changes to golang code does not break CLI

# Only runs when golang code (or test cases) have changed

# Only tests if iter8 CLI works after golang code changes

on:
  pull_request:
    branches:
    - master
    paths:
    - '**.go'
    - 'testdata/**'

jobs:
  unit-test:
    name: unit-test
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - name: Test and compute coverage
      run: make coverage # includes vet and lint
    - name: Enforce coverage
      run: |
        export COVERAGE=$(go tool cover -func coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "code coverage is at ${COVERAGE}"
        if [ 1 -eq "$(echo "${COVERAGE} > 76.0" | bc)" ]; then \
          echo "all good... coverage is above 76.0%"; 
        else \
          echo "not good... coverage is not above 76.0%";
          exit 1
        fi

  cli-test-http:
    name: CLI test with http task
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - name: Build and install Iter8
      run: make install
    - name: Start kind cluster
      uses: helm/kind-action@v1.5.0
      with:
        wait: 300s

    # # No need to create httpbin application because only testing CLI
    # 
    # - name: Create httpbin application
    #   run: |
    #     kubectl create deploy httpbin --image=kennethreitz/httpbin --port=80
    #     kubectl expose deploy httpbin --port=80
 
    - name: CLI test with http task
      run: |
        iter8 k launch \
        --set "tasks={ready,http}" \
        --set ready.deploy=httpbin \
        --set ready.service=httpbin \
        --set ready.timeout=60s \
        --set http.url=http://httpbin.default/get \
        --set http.duration="3s" \
        --set logLevel=trace
        kubectl wait --for=condition=complete --timeout=60s job/default-1-job

    - name: Get Kubernetes status
      run: |
        kubectl get all


    - name: Try other iter8 k commands
      run: |
        iter8 k log
        iter8 k delete

  cli-test-grpc:
    name: CLI test with grpc task
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - name: Build and install Iter8
      run: make install

    - name: Start kind cluster
      uses: helm/kind-action@v1.5.0
      with:
        wait: 300s

    # # No need to create routeguide application because only testing CLI
    # 
    # - name: Create routeguide application
    #   run: |
    #     kubectl create deployment routeguide --image=golang --port=50051 \
    #     -- bash -c "git clone -b v1.52.0 --depth 1 https://github.com/grpc/grpc-go; cd grpc-go/examples/route_guide; sed -i "''" "'"s/localhost//"'" server/server.go; go run server/server.go"
    #     kubectl expose deployment routeguide --port=50051
    #     kubectl wait --for=condition=available --timeout=60s deployment/routeguide

    # - name: Test gRPC service with grpcurl
    #   run: |
    #     curl -sO https://gist.githubusercontent.com/kalantar/510737f0fd58c0432a08e5b6e45ec97f/raw/524d6660284bf653ce0f29f3a25ed0e913c3df80/grpcurl-routeguide.yaml
    #     kubectl apply -f grpcurl-routeguide.yaml
    #     sleep 180
    #     kubectl logs deploy/sleep

    - name: CLI test with grpc task
      run: |
        iter8 k launch \
        --set "tasks={ready,grpc}" \
        --set ready.deploy=routeguide \
        --set ready.service=routeguide \
        --set ready.timeout=60s \
        --set grpc.host=routeguide.default:50051 \
        --set grpc.protoURL=https://raw.githubusercontent.com/grpc/grpc-go/v1.52.0/examples/route_guide/routeguide/route_guide.proto \
        --set grpc.call=routeguide.RouteGuide.GetFeature \
        --set grpc.dataURL=https://raw.githubusercontent.com/iter8-tools/docs/v0.13.13/samples/grpc-payload/unary.json \
        --set logLevel=trace
        kubectl wait --for=condition=complete --timeout=60s job/default-1-job

    - name: Get Kubernetes status
      run: |
        kubectl get all


    - name: Try other iter8 k commands
      run: |
        iter8 k log
        iter8 k delete