name: Test

on:
  pull_request:
    branches:
    - master

jobs:
  assets:
    name: Build and push test Docker image
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19
    - uses: actions/checkout@v3
    - name: Create Dockerfile.dev
      run: |
        echo "# Small linux image with iter8 binary
        FROM debian:buster-slim
        
        # Install curl
        RUN apt-get update && apt-get install -y curl
        
        # Download iter8 compressed binary
        # use COPY instead of wget
        COPY _dist/iter8-linux-amd64.tar.gz iter8-linux-amd64.tar.gz
        
        # Extract iter8
        RUN tar -xvf iter8-linux-amd64.tar.gz
        
        # Extract iter8
        RUN mv linux-amd64/iter8 /bin/iter8" > Dockerfile.dev
    - name: Get version and tag
      id: versionTag
      run: |
        # GitHub ref name
        VERSION=${GITHUB_REF_NAME}
        echo "VERSION: $VERSION"
        echo "VERSION=${VERSION}" >> "$GITHUB_ENV"
        echo "VERSION=${VERSION}" >> "$GITHUB_OUTPUT"
    - name: Get owner
      run: |
        OWNER_REPO=${{ github.repository }}
        OWNER=$(echo $OWNER_REPO | cut -f1 -d/)
        if [[ "$OWNER" == "iter8-tools" ]]; then
          OWNER=iter8
        fi
        echo "OWNER: $OWNER"
        echo "OWNER=$OWNER" >> $GITHUB_ENV
    - name: Get image tag
      id: imageTag
      run: |
        # Docker image
        IMAGE_TAG=$(echo ${OWNER}/iter8-pr:${VERSION})
        echo "IMAGE_TAG: $IMAGE_TAG"
        echo "IMAGE_TAG=${IMAGE_TAG}" >> "$GITHUB_ENV"
        echo "IMAGE_TAG=${IMAGE_TAG}" >> "$GITHUB_OUTPUT"
    - uses: docker/setup-buildx-action@v2
    - uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_SECRET }}
    - uses: docker/build-push-action@v4
      with:
        platforms: linux/amd64
        tags: ${{ env.IMAGE_TAG }}
        push: true
        file: "{context}/Dockerfile.dev"
    outputs:
      VERSION: ${{ steps.versionTag.outputs.VERSION }}
      IMAGE_TAG: ${{ steps.imageTag.outputs.IMAGE_TAG }}

  kubernetes-load-test-http:
    name: HTTP load test (with readiness) at the edge of Kubernetes
    needs: assets
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - name: Build and install Iter8
      run: make install
    - name: Start kind cluster
      uses: helm/kind-action@v1.5.0
      with:
        wait: 300s
    - name: Create httpbin application
      run: |
        kubectl create deploy httpbin --image=kennethreitz/httpbin --port=80
        kubectl expose deploy httpbin --port=80
        kubectl wait --for=condition=available --timeout=60s deploy/httpbin
    - name: Install controller
      run: |
        helm install iter8 charts/controller --set image=${{needs.assets.outputs.IMAGE_TAG}} --set logLevel=trace
        kubectl rollout status --watch --timeout=60s statefulset/iter8
    - name: load-test-http in Kubernetes
      run: |
        iter8 k launch --localChart --chartName charts/iter8 \
        --set iter8Image=${{needs.assets.outputs.IMAGE_TAG}} \
        --set "tasks={ready,http}" \
        --set ready.deploy=httpbin \
        --set ready.service=httpbin \
        --set ready.timeout=60s \
        --set http.url=http://httpbin.default/get \
        --set http.duration="3s" \
        --set logLevel=trace
        sleep 60
    - name: Test additional Iter8 commands
      run: |
        iter8 k log
        iter8 k delete
    - name: Expose metrics service
      run: |
        kubectl port-forward service/iter8 8080:8080 &
    - name: Check GET /httpDashboard
      run: |
        curl "http://localhost:8080/httpDashboard?namespace=default&experiment=default" -f