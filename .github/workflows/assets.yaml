name: Publish binaries, Brew formula, and Docker image

on:
  release:
    types: [published]

jobs:
  assets:
    name: Publish binaries and Brew formula
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19
    - uses: actions/checkout@v2
    - name: Build binaries
      run: |
        VERSION=${GITHUB_REF#refs/*/}
        echo "Version: ${VERSION}"
        make dist
    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: _dist/iter8-*.tar.gz
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true
    - name: create-checksum
      id: create-checksum
      run: |
        VERSION=${GITHUB_REF#refs/*/}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        wget https://github.com/iter8-tools/iter8/archive/refs/tags/${VERSION}.zip
        sha256sum ${VERSION}.zip > checksum.txt
        wget https://github.com/iter8-tools/iter8/archive/refs/tags/${VERSION}.tar.gz
        sha256sum ${VERSION}.tar.gz >> checksum.txt
        cd _dist
        for f in iter8-*.tar.gz
        do
          sha256sum ${f} >> ../checksum.txt
        done
        # pick up darwin checksum and export it
        echo "SHAFORMAC=$(grep darwin ../checksum.txt | awk '{print $1}')" >> $GITHUB_ENV
    - name: Upload checksum to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        asset_name: checksum.txt
        file: checksum.txt
        tag: ${{ github.ref }}
        overwrite: true
    - name: Update Homebrew formula
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.PERSONAL_TOKEN }}
        repository: iter8-tools/homebrew-iter8
        event-type: release
        client-payload: '{"ref": "${{ env.VERSION }}", "sha": "${{ github.sha }}", "shaformac": "${{ env.SHAFORMAC }}"}'

  # Push Iter8 image to dockerhub
  build-and-push:
    runs-on: ubuntu-latest
    needs: assets
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Get version
      run: |
        tagref=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        # Strip "v" prefix from tagref
        echo "VERSION=$(echo $tagref | sed -e 's/^v//')" >> $GITHUB_ENV
        echo "MAJOR_MINOR_VERSION=$(echo $tagref | sed -e 's/^v//' -e 's,\([0-9]*\.[0-9]*\)\.\([0-9]*\),\1,')" >> $GITHUB_ENV
    - name: Get owner
      run: |
        ownerrepo=${{ github.repository }}
        owner=$(echo $ownerrepo | cut -f1 -d/)
        if [[ "$owner" == "iter8-tools" ]]; then
          owner=iter8
        fi
        echo "OWNER=$owner" >> $GITHUB_ENV
    - uses: docker/setup-buildx-action@v2
    - uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_SECRET }}
    - uses: docker/build-push-action@v3
      with:
        platforms: linux/amd64,linux/arm64
        tags: ${{ env.OWNER }}/iter8:${{ env.VERSION }},${{ env.OWNER }}/iter8:${{ env.MAJOR_MINOR_VERSION }},${{ env.OWNER }}/iter8:latest
        push: true
        build-args: |
          TAG=v${{ env.VERSION }}

  kubernetes-http-experiment:
    name: Kubernetes http load test    
    runs-on: ubuntu-latest
    needs: 
    - build-and-push
    - assets
    steps:
    - uses: iter8-tools/iter8@v0.13
    - name: Start kind cluster
      uses: helm/kind-action@v1.2.0
      with:
        wait: 300s
    - name: create app
      run: |
        kubectl create deployment httpbin --image=kennethreitz/httpbin
        kubectl expose deployment httpbin --type=ClusterIP --port=80
        kubectl wait --for=condition=available --timeout=60s deploy/httpbin
    - name: iter8 k launch
      run: |
        iter8 k launch \
        --set tasks={http} \
        --set http.url="http://httpbin.default/get" \
        --set runner=job
    - name: try other iter8 k commands
      run: |
        iter8 k assert -c completed -c nofailure --timeout 60s
        iter8 k report
        iter8 k log
        iter8 k delete

  kubernetes-grpc-experiment:
    name: Kubernetes gRPC load test
    runs-on: ubuntu-latest
    needs: 
    - build-and-push
    - assets
    steps:
    - uses: iter8-tools/iter8@v0.13
    - name: Start kind cluster
      uses: helm/kind-action@v1.2.0
      with:
        wait: 300s
    - name: create app
      run: |
        kubectl create deploy hello --image=docker.io/grpc/java-example-hostname:latest --port=50051
        kubectl expose deploy hello --port=50051
        kubectl wait --for=condition=available --timeout=60s deploy/hello
    - name: iter8 k launch
      run: |
        iter8 k launch \
        --set tasks={grpc} \
        --set grpc.host="hello.default:50051" \
        --set grpc.call="helloworld.Greeter.SayHello" \
        --set grpc.protoURL="https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto" \
        --set runner=job
    - name: try other iter8 k commands
      run: |
        iter8 k assert -c completed -c nofailure --timeout 60s
        iter8 k report
        iter8 k log
        iter8 k delete

  readiness:
    name: Kubernetes readiness test
    runs-on: ubuntu-latest
    needs: 
    - build-and-push
    - assets
    steps:
    - uses: iter8-tools/iter8@v0.13
    - name: Start kind cluster
      uses: helm/kind-action@v1.2.0
      with:
        wait: 300s
    - name: deploy resources to cluster
      run: |
        kubectl create deploy httpbin --image=kennethreitz/httpbin --port=80
        kubectl expose deploy httpbin --port=80
    - name: k launch with readiness checks
      run: |
        iter8 k launch \
        --set "tasks={ready,http,assess}" \
        --set ready.deploy="httpbin" \
        --set ready.service="httpbin" \
        --set ready.timeout=60s \
        --set http.url=http://httpbin.default \
        --set assess.SLOs.upper.http/latency-mean=50 \
        --set runner=job
    - name: k assert experiment completed without failures
      run: |
        iter8 k assert -c completed -c nofailure --timeout 60s

  readiness-with-namespace:
    name: Kubernetes readiness test with namespace
    runs-on: ubuntu-latest
    needs: 
    - build-and-push
    - assets
    steps:
    - uses: iter8-tools/iter8@v0.13
    - name: Start kind cluster
      uses: helm/kind-action@v1.2.0
      with:
        wait: 300s
    - name: deploy resources to cluster
      run: |
        kubectl create deploy httpbin --image=kennethreitz/httpbin --port=80
        kubectl expose deploy httpbin --port=80
        kubectl create namespace experiments
    - name: k launch with readiness checks
      run: |
        iter8 k launch -n experiments \
        --set "tasks={ready,http,assess}" \
        --set ready.deploy="httpbin" \
        --set ready.service="httpbin" \
        --set ready.timeout=60s \
        --set ready.namespace=default \
        --set http.url=http://httpbin.default/get \
        --set assess.SLOs.upper.http/latency-mean=50 \
        --set runner=job
    - name: k assert experiment completed without failures
      run: |
        iter8 k assert -n experiments -c completed -c nofailure --timeout 60s
