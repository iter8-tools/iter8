name: Publish binaries and Docker image

on:
  release:
    types: [published]

jobs:
  assets:
    name: Publish binaries
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19
    - uses: actions/checkout@v3
    - name: Build binaries
      run: |
        VERSION=${GITHUB_REF#refs/*/}
        echo "Version: ${VERSION}"
        make dist
    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: _dist/iter8-*.tar.gz
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true
    - name: Create checksum
      run: |
        VERSION=${GITHUB_REF#refs/*/}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        wget https://github.com/iter8-tools/iter8/archive/refs/tags/${VERSION}.zip
        sha256sum ${VERSION}.zip > checksum.txt
        wget https://github.com/iter8-tools/iter8/archive/refs/tags/${VERSION}.tar.gz
        sha256sum ${VERSION}.tar.gz >> checksum.txt
        cd _dist
        for f in iter8-*.tar.gz
        do
          sha256sum ${f} >> ../checksum.txt
        done
        # pick up darwin checksum and export it
        echo "SHAFORMAC=$(grep darwin ../checksum.txt | awk '{print $1}')" >> $GITHUB_ENV
    - name: Upload checksum to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        asset_name: checksum.txt
        file: checksum.txt
        tag: ${{ github.ref }}
        overwrite: true

  build-and-push:
    name: Push Iter8 image to Docker Hub
    needs: assets
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Get version
      run: |
        tagref=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        # Strip "v" prefix from tagref
        echo "VERSION=$(echo $tagref | sed -e 's/^v//')" >> $GITHUB_ENV
        echo "MAJOR_MINOR_VERSION=$(echo $tagref | sed -e 's/^v//' -e 's,\([0-9]*\.[0-9]*\)\.\([0-9]*\),\1,')" >> $GITHUB_ENV
    - name: Get owner
      run: |
        ownerrepo=${{ github.repository }}
        owner=$(echo $ownerrepo | cut -f1 -d/)
        if [[ "$owner" == "iter8-tools" ]]; then
          owner=iter8
        fi
        echo "OWNER=$owner" >> $GITHUB_ENV
    - uses: docker/setup-buildx-action@v2
    - uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_SECRET }}
    - uses: docker/build-push-action@v4
      with:
        platforms: linux/amd64,linux/arm64
        tags: ${{ env.OWNER }}/iter8:${{ env.VERSION }},${{ env.OWNER }}/iter8:${{ env.MAJOR_MINOR_VERSION }},${{ env.OWNER }}/iter8:latest
        push: true
        build-args: |
          TAG=v${{ env.VERSION }}

  kubernetes-http-experiment:
    name: Kubernetes HTTP load test
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Install Iter8
      run: GOBIN=/usr/local/bin go install github.com/iter8-tools/iter8@v0.15
    - name: Start kind cluster
      uses: helm/kind-action@v1.5.0
      with:
        wait: 300s
    - name: Create app
      run: |
        kubectl create deployment httpbin --image=kennethreitz/httpbin
        kubectl expose deployment httpbin --type=ClusterIP --port=80
        kubectl wait --for=condition=available --timeout=60s deploy/httpbin
    - name: iter8 k launch
      run: |
        iter8 k launch \
        --set tasks={http} \
        --set http.url="http://httpbin.default/get" \
    - name: try other iter8 k commands
      run: |
        iter8 k assert -c completed -c nofailure --timeout 60s
        iter8 k log
        iter8 k delete

  kubernetes-grpc-experiment:
    name: Kubernetes gRPC load test
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Install Iter8
      run: GOBIN=/usr/local/bin go install github.com/iter8-tools/iter8@v0.15
    - name: Start kind cluster
      uses: helm/kind-action@v1.5.0
      with:
        wait: 300s
    - name: Create app
      run: |
        kubectl create deployment routeguide --image=golang --port=50051 \
        -- bash -c "git clone -b v1.52.0 --depth 1 https://github.com/grpc/grpc-go; cd grpc-go/examples/route_guide; sed -i "''" "'"s/localhost//"'" server/server.go; go run server/server.go"
        kubectl expose deployment routeguide --port=50051
        kubectl wait --for=condition=available --timeout=60s deployment/routeguide

    - name: Test gRPC service with grpcurl
      run: |
        curl -sO https://gist.githubusercontent.com/kalantar/510737f0fd58c0432a08e5b6e45ec97f/raw/524d6660284bf653ce0f29f3a25ed0e913c3df80/grpcurl-routeguide.yaml
        kubectl apply -f grpcurl-routeguide.yaml
        sleep 180
        kubectl logs deploy/sleep
  
    - name: iter8 k launch
      run: |
        iter8 k launch \
        --set tasks={grpc} \
        --set grpc.host=routeguide.default:50051 \
        --set grpc.protoURL=https://raw.githubusercontent.com/grpc/grpc-go/v1.52.0/examples/route_guide/routeguide/route_guide.proto \
        --set grpc.call=routeguide.RouteGuide.GetFeature \
        --set grpc.dataURL=https://raw.githubusercontent.com/iter8-tools/docs/v0.13.13/samples/grpc-payload/unary.json \
        --set runner=job
    - name: try other iter8 k commands
      run: |
        iter8 k assert -c completed -c nofailure --timeout 60s
        iter8 k report
        iter8 k log
        iter8 k delete

  kubernetes-grpc-experiment2:
    name: Kubernetes gRPC load test 2
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Install Iter8
      run: GOBIN=/usr/local/bin go install github.com/iter8-tools/iter8@v0.15
    - name: Start kind cluster
      uses: helm/kind-action@v1.5.0
      with:
        wait: 300s
    - name: Create app
      run: |
        kubectl create deploy hello --image=docker.io/grpc/java-example-hostname:latest --port=50051
        kubectl expose deploy hello --port=50051
        kubectl wait --for=condition=available --timeout=60s deploy/hello
    - name: iter8 k launch
      run: |
        iter8 k launch \
        --set tasks={grpc} \
        --set grpc.host="hello.default:50051" \
        --set grpc.call="helloworld.Greeter.SayHello" \
        --set grpc.protoURL="https://raw.githubusercontent.com/grpc/grpc-go/master/examples/helloworld/helloworld/helloworld.proto" \
    - name: try other iter8 k commands
      run: |
        iter8 k assert -c completed -c nofailure --timeout 60s
        iter8 k log
        iter8 k delete

  readiness:
    name: Kubernetes readiness test
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Install Iter8
      run: GOBIN=/usr/local/bin go install github.com/iter8-tools/iter8@v0.15
    - name: Start kind cluster
      uses: helm/kind-action@v1.5.0
      with:
        wait: 300s
    - name: Deploy resources to cluster
      run: |
        kubectl create deploy httpbin --image=kennethreitz/httpbin --port=80
        kubectl expose deploy httpbin --port=80
    - name: k launch with readiness checks
      run: |
        iter8 k launch \
        --set "tasks={ready,http}" \
        --set ready.deploy="httpbin" \
        --set ready.service="httpbin" \
        --set ready.timeout=60s \
        --set http.url=http://httpbin.default \
    - name: k assert experiment completed without failures
      run: |
        iter8 k assert -c completed -c nofailure --timeout 60s

  readiness-with-namespace:
    name: Kubernetes readiness test with namespace
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Install Iter8
      run: GOBIN=/usr/local/bin go install github.com/iter8-tools/iter8@v0.15
    - name: Start kind cluster
      uses: helm/kind-action@v1.5.0
      with:
        wait: 300s
    - name: Deploy resources to cluster
      run: |
        kubectl create deploy httpbin --image=kennethreitz/httpbin --port=80
        kubectl expose deploy httpbin --port=80
        kubectl create namespace experiments
    - name: k launch with readiness checks
      run: |
        iter8 k launch -n experiments \
        --set "tasks={ready,http}" \
        --set ready.deploy="httpbin" \
        --set ready.service="httpbin" \
        --set ready.timeout=60s \
        --set ready.namespace=default \
        --set http.url=http://httpbin.default/get \
    - name: k assert experiment completed without failures
      run: |
        iter8 k assert -n experiments -c completed -c nofailure --timeout 60s