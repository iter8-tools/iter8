name: e2e tests

on:
  push:
    branches:
    - master
    paths:
    - 'install/**'
    - 'samples/knative/**'
    - '.github/workflows/knative-e2e-tests.yaml'
  pull_request:
    paths:
    - 'install/**'
    - 'samples/knative/**'
    - '.github/workflows/knative-e2e-tests.yaml'

jobs:
  quickstart:
    name: quickstart experiment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: engineerd/setup-kind@v0.5.0
    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/knative/quickstart/platformsetup.sh contour

    - name: create Knative service and readiness check
      run: |
        export ITER8=$(pwd)
        kubectl apply -f $ITER8/samples/knative/quickstart/baseline.yaml
        kubectl apply -f $ITER8/samples/knative/quickstart/experimentalservice.yaml
        kubectl wait --for=condition=Ready ksvc/sample-app --timeout=240s

    - name: create Fortio job and create experiment
      run: |
        export ITER8=$(pwd)
        sed -i "s/6000s/120s/g" $ITER8/samples/knative/quickstart/fortio.yaml
        URL_VALUE=$(kubectl get ksvc sample-app -o json | jq .status.address.url)
        sed "s+URL_VALUE+${URL_VALUE}+g" $ITER8/samples/knative/quickstart/fortio.yaml | kubectl apply -f -
        
        # Wait for Fortio to be ready
        pod_name=$(kubectl get pods --selector=job-name=fortio -o jsonpath='{.items[*].metadata.name}')
        kubectl wait --for=condition=Ready pods/"$pod_name" --timeout=240s

        # Define metrics
        kubectl apply -f $ITER8/samples/knative/quickstart/metrics.yaml

        # Starting the experiment
        kubectl apply -f $ITER8/samples/knative/quickstart/experiment.yaml

    - name: Sleep until end of experiment
      run: |
        sleep 150.0
        kubectl get experiment quickstart-exp -o yaml
    
    - name: Check if experiment is complete and successful
      run: |
        export ITER8=$(pwd)
        export EXPERIMENT=quickstart-exp
        source $ITER8/samples/knative/quickstart/check.sh

  canary:
    name: canary experiment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: engineerd/setup-kind@v0.5.0
    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/knative/quickstart/platformsetup.sh contour

    - name: create Knative service and readiness check
      run: |
        export ITER8=$(pwd)
        kubectl apply -f $ITER8/samples/knative/quickstart/baseline.yaml
        kubectl apply -f $ITER8/samples/knative/quickstart/experimentalservice.yaml
        kubectl wait --for=condition=Ready ksvc/sample-app --timeout=240s

    - name: create Fortio job and create experiment
      run: |
        export ITER8=$(pwd)
        sed -i "s/6000s/120s/g" $ITER8/samples/knative/quickstart/fortio.yaml
        URL_VALUE=$(kubectl get ksvc sample-app -o json | jq .status.address.url)
        sed "s+URL_VALUE+${URL_VALUE}+g" $ITER8/samples/knative/quickstart/fortio.yaml | kubectl apply -f -
        
        # Wait for Fortio to be ready
        pod_name=$(kubectl get pods --selector=job-name=fortio -o jsonpath='{.items[*].metadata.name}')
        kubectl wait --for=condition=Ready pods/"$pod_name" --timeout=240s

        # Define metrics
        kubectl apply -f $ITER8/samples/knative/quickstart/metrics.yaml

        # Starting the experiment
        kubectl apply -f $ITER8/samples/knative/canary/experiment.yaml

    - name: Sleep until end of experiment
      run: |
        sleep 150.0
        kubectl get experiment canary-exp -o yaml
    
    - name: Check if experiment is complete and successful
      run: |
        export ITER8=$(pwd)
        source $ITER8/samples/knative/canary/check.sh

  conformance:
    name: conformance experiment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: engineerd/setup-kind@v0.5.0

    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/knative/quickstart/platformsetup.sh contour

    - name: create Knative app
      run: |
        export ITER8=$(pwd)
        kubectl apply -f $ITER8/samples/knative/conformance/baseline.yaml        
        kubectl wait --for=condition=Ready ksvc/sample-app --timeout=240s

    - name: Generate requests
      run: |
        export ITER8=$(pwd)
        sed -i "s/6000s/120s/g" $ITER8/samples/knative/conformance/fortio.yaml
        URL_VALUE=$(kubectl get ksvc sample-app -o json | jq .status.address.url)
        sed "s+URL_VALUE+${URL_VALUE}+g" $ITER8/samples/knative/conformance/fortio.yaml | kubectl apply -f -

        # Wait for Fortio to be ready
        pod_name=$(kubectl get pods --selector=job-name=fortio -o jsonpath='{.items[*].metadata.name}')
        kubectl wait --for=condition=Ready pods/"$pod_name" --timeout=240s

    - name: Create Iter8 experiment
      run: |
        export ITER8=$(pwd)

        # Define metrics
        kubectl apply -f $ITER8/samples/knative/quickstart/metrics.yaml

        kubectl apply -f $ITER8/samples/knative/conformance/experiment.yaml

    - name: Sleep until end of experiment
      run: |
        sleep 150.0
        kubectl get experiment conformance-exp -o yaml
    
    - name: Check if experiment is complete and successful
      run: |
        export ITER8=$(pwd)
        source $ITER8/samples/knative/conformance/check.sh
        
  progressive:
    name: progressive experiment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: engineerd/setup-kind@v0.5.0

    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/knative/quickstart/platformsetup.sh kourier

    - uses: azure/setup-helm@v1

    - name: RBAC rules for helm
      run: |
        export ITER8=$(pwd)
        kubectl apply -f ${ITER8}/samples/knative/canaryprogressive/helm-rbac.yaml

    - name: create Knative app with canary
      run: |
        export ITER8=$(pwd)
        helm install --repo https://raw.githubusercontent.com/iter8-tools/iter8/master/samples/knative/canaryprogressive/helm-repo sample-app sample-app --namespace=default
        kubectl wait ksvc/sample-app --for condition=Ready --timeout=240s
        helm upgrade --install --repo https://raw.githubusercontent.com/iter8-tools/iter8/master/samples/knative/canaryprogressive/helm-repo sample-app sample-app --values=https://raw.githubusercontent.com/iter8-tools/iter8/master/samples/knative/canaryprogressive/experimental-values.yaml --namespace=default
        kubectl wait --for=condition=Ready ksvc/sample-app --timeout=240s

    - name: Generate requests
      run: |
        export ITER8=$(pwd)
        sed -i "s/6000s/120s/g" $ITER8/samples/knative/canaryprogressive/fortio.yaml        
        URL_VALUE=$(kubectl get ksvc sample-app -o json | jq .status.address.url)
        sed "s+URL_VALUE+${URL_VALUE}+g" $ITER8/samples/knative/canaryprogressive/fortio.yaml | kubectl apply -f -

        # Wait for Fortio to be ready
        pod_name=$(kubectl get pods --selector=job-name=fortio -o jsonpath='{.items[*].metadata.name}')
        kubectl wait --for=condition=Ready pods/"$pod_name" --timeout=240s

    - name: Create Iter8 experiment
      run: |
        export ITER8=$(pwd)

        # Define metrics
        kubectl apply -f $ITER8/samples/knative/quickstart/metrics.yaml

        export ITER8=$(pwd)
        kubectl apply -f $ITER8/samples/knative/canaryprogressive/experiment.yaml

    - name: Sleep until end of experiment
      run: |
        sleep 150.0
        kubectl get experiment canary-progressive -o yaml
    
    - name: Check if experiment is complete and successful
      run: |
        export ITER8=$(pwd)
        source $ITER8/samples/knative/canaryprogressive/check.sh

  fixedsplit:
    name: fixed-split experiment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: engineerd/setup-kind@v0.5.0
    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/knative/quickstart/platformsetup.sh contour

    - name: create Knative service and readiness check
      run: |
        export ITER8=$(pwd)
        kubectl apply -f $ITER8/samples/knative/quickstart/baseline.yaml
        kubectl apply -f $ITER8/samples/knative/fixed-split/experimentalservice.yaml
        kubectl wait --for=condition=Ready ksvc/sample-app --timeout=240s

    - name: create Fortio job and create experiment
      run: |
        export ITER8=$(pwd)
        sed -i "s/6000s/120s/g" $ITER8/samples/knative/quickstart/fortio.yaml
        URL_VALUE=$(kubectl get ksvc sample-app -o json | jq .status.address.url)
        sed "s+URL_VALUE+${URL_VALUE}+g" $ITER8/samples/knative/quickstart/fortio.yaml | kubectl apply -f -
        
        # Wait for Fortio to be ready
        pod_name=$(kubectl get pods --selector=job-name=fortio -o jsonpath='{.items[*].metadata.name}')
        kubectl wait --for=condition=Ready pods/"$pod_name" --timeout=240s

        # Define metrics
        kubectl apply -f $ITER8/samples/knative/quickstart/metrics.yaml

        # Starting the experiment
        kubectl apply -f $ITER8/samples/knative/fixed-split/experiment.yaml

    - name: Sleep until end of experiment
      run: |
        sleep 150.0
        kubectl get experiment fixedsplit-exp -o yaml
    
    - name: Check if experiment is complete and successful
      run: |
        export ITER8=$(pwd)
        export EXPERIMENT=fixedsplit-exp
        source $ITER8/samples/knative/quickstart/check.sh

  canary-fixedsplit-kustomize:
    name: fixedsplit canary experiment with kustomize
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: engineerd/setup-kind@v0.5.0

    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/knative/quickstart/platformsetup.sh contour

    - name: create Knative app with canary
      run: |
        export ITER8=$(pwd)
        kustomize build $ITER8/samples/knative/canaryfixedsplit/baseline | kubectl apply -f -
        kubectl wait ksvc/sample-app --for condition=Ready --timeout=240s
        kustomize build $ITER8/samples/knative/canaryfixedsplit/experimentalservice | kubectl apply -f -        

    - name: Generate requests
      run: |
        export ITER8=$(pwd)
        kubectl wait --for=condition=Ready ksvc/sample-app --timeout=240s
        sed -i "s/6000s/120s/g" $ITER8/samples/knative/canaryfixedsplit/fortio.yaml        
        URL_VALUE=$(kubectl get ksvc sample-app -o json | jq .status.address.url)
        sed "s+URL_VALUE+${URL_VALUE}+g" $ITER8/samples/knative/canaryfixedsplit/fortio.yaml | kubectl apply -f -

        # Wait for Fortio to be ready
        pod_name=$(kubectl get pods --selector=job-name=fortio -o jsonpath='{.items[*].metadata.name}')
        kubectl wait --for=condition=Ready pods/"$pod_name" --timeout=240s

    - name: Create Iter8 experiment
      run: |
        export ITER8=$(pwd)

        # Define metrics
        kubectl apply -f $ITER8/samples/knative/quickstart/metrics.yaml

        kubectl apply -f $ITER8/samples/knative/canaryfixedsplit/experiment.yaml

    - name: Sleep until end of experiment
      run: |
        sleep 150.0
        kubectl get experiment canary-fixedsplit -o yaml
    
    - name: Check if experiment is complete and successful
      run: |
        export ITER8=$(pwd)
        source $ITER8/samples/knative/canaryfixedsplit/check.sh

