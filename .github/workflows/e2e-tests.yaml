name: e2e tests

on:
  push:
    branches:
    - master
    paths:
    - 'install/**'
    - '!install/docker/**'
    - 'samples/knative/**'
    - '.github/workflows/e2e-tests.yaml'
  pull_request:
    paths:
    - 'install/**'
    - '!install/docker/**'
    - 'samples/knative/**'
    - '.github/workflows/e2e-tests.yaml'

jobs:
  your-first-experiment:
    name: your first experiment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: engineerd/setup-kind@v0.5.0
      with:
        version: "v0.11.1"

    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/setup/iter8-setup.sh

    # - name: Install Go
    #   run: |
    #     wget -q https://golang.org/dl/go1.17.1.linux-amd64.tar.gz
    #     sudo rm -rf /usr/local/go
    #     sudo tar -C /usr/local -xzf go1.17.1.linux-amd64.tar.gz
    #     export PATH=$PATH:/usr/local/go/bin
    #     sudo go version
    #     which go
    #     sudo which go
    
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - env:
        GOBIN: $GOROOT/bin
      run: |
        echo "PATH=$PATH"
        echo "GOBIN=$GOBIN"
        sudo which go
        sudo go version
        which go
        go version
    
    - name: Get iter8ctl
      run: |
        sudo go install github.com/iter8-tools/etc3/iter8ctl@mergerepos

    - name: Get Helm
      uses: azure/setup-helm@v1

    - name: create application
      run: |
        export ITER8=$(pwd)
        kubectl apply -f $ITER8/samples/deployments/app/deploy.yaml
        kubectl apply -f $ITER8/samples/deployments/app/service.yaml

    - name: create Iter8 experiment
      run: |
        export ITER8=$(pwd)
        helm upgrade my-exp $ITER8/samples/first-exp \
          --set URL='http://hello.default.svc.cluster.local:8080' \
          --set limitMeanLatency=50.0 \
          --set limitErrorRate=0.0 \
          --set limit95thPercentileLatency=100.0 \
          --install

    - name: Wait until end of experiment and dump experiment
      run: |
        export EXPERIMENT=$(kubectl get experiment -o jsonpath='{.items[0].metadata.name}')
        kubectl wait experiment $EXPERIMENT --for=condition=Completed --timeout=300s
        kubectl get experiment $EXPERIMENT -o yaml
    
    - name: Check if experiment is complete and found a winner
      run: iter8ctl assert -c completed -c winnerFound

  knative-slovalidation:
    name: knative slovalidation experiment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: engineerd/setup-kind@v0.5.0
      with:
        version: "v0.11.1"

    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/setup/iter8-setup.sh
        $ITER8/samples/knative/quickstart/platform-setup.sh

    - name: create Knative service and readiness check
      run: |
        export ITER8=$(pwd)
        kubectl apply -f $ITER8/samples/knative/quickstart/baseline.yaml
        kubectl apply -f $ITER8/samples/knative/quickstart/experimentalservice.yaml
        kubectl wait --for=condition=Ready ksvc/sample-app --timeout=240s

    - name: Create experiment
      run: |
        export ITER8=$(pwd)

        # Starting the experiment
        kubectl apply -f $ITER8/samples/knative/quickstart/experiment.yaml

    - name: Wait until end of experiment
      run: |
        export EXPERIMENT=quickstart-exp
        # Wait for experiment to complete
        kubectl wait experiment $EXPERIMENT --for=condition=Completed --timeout=300s
        kubectl get experiment $EXPERIMENT -o yaml
    
    - name: Check if experiment is complete and successful
      run: |
        export ITER8=$(pwd)
        export EXPERIMENT=quickstart-exp
        source $ITER8/samples/knative/quickstart/check.sh

  hybrid:
    name: hybrid experiment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: engineerd/setup-kind@v0.5.0
      with:
        version: "v0.11.1"

    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/setup/iter8-setup.sh
        $ITER8/samples/knative/quickstart/platform-setup.sh

    - name: create Knative service and readiness check
      run: |
        export ITER8=$(pwd)
        kubectl apply -f $ITER8/samples/knative/quickstart/baseline.yaml
        kubectl apply -f $ITER8/samples/knative/quickstart/experimentalservice.yaml
        kubectl wait --for=condition=Ready ksvc/sample-app --timeout=240s

    - name: create experiment
      run: |
        export ITER8=$(pwd)

        # apply metrics
        kubectl apply -f $ITER8/samples/knative/hybrid/metrics.yaml
        sleep 10.0

        # Starting the experiment
        kubectl apply -f $ITER8/samples/knative/hybrid/experiment.yaml

    - name: Wait until end of experiment
      run: |
        export EXPERIMENT=hybrid-exp
        # Wait for experiment to complete
        kubectl wait experiment $EXPERIMENT --for=condition=Completed --timeout=360s
        kubectl get experiment $EXPERIMENT -o yaml
    
    - name: Check if experiment is complete and successful
      run: |
        export ITER8=$(pwd)
        export EXPERIMENT=hybrid-exp
        source $ITER8/samples/knative/quickstart/check.sh

  conformance:
    name: conformance experiment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: engineerd/setup-kind@v0.5.0
      with:
        version: "v0.11.1"    

    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/setup/iter8-setup.sh
        $ITER8/samples/knative/quickstart/platform-setup.sh

    - name: create Knative app
      run: |
        export ITER8=$(pwd)
        kubectl apply -f $ITER8/samples/knative/conformance/baseline.yaml
        kubectl wait --for=condition=Ready ksvc/sample-app --timeout=240s

    - name: Create Iter8 experiment
      run: |
        export ITER8=$(pwd)
        kubectl apply -f $ITER8/samples/knative/conformance/experiment.yaml

    - name: Wait until end of experiment
      run: |
        export EXPERIMENT=conformance-exp
        # Wait for experiment to complete
        kubectl wait experiment $EXPERIMENT --for=condition=Completed --timeout=300s
        kubectl get experiment $EXPERIMENT -o yaml
    
    - name: Check if experiment is complete and successful
      run: |
        export ITER8=$(pwd)
        export EXPERIMENT=conformance-exp
        source $ITER8/samples/knative/conformance/check.sh
        
  fixed-split:
    name: fixed-split experiment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: engineerd/setup-kind@v0.5.0
      with:
        version: "v0.11.1"

    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/setup/iter8-setup.sh
        $ITER8/samples/knative/quickstart/platform-setup.sh

    - name: create Knative service and readiness check
      run: |
        export ITER8=$(pwd)
        kubectl apply -f $ITER8/samples/knative/quickstart/baseline.yaml
        kubectl apply -f $ITER8/samples/knative/fixed-split/experimentalservice.yaml
        kubectl wait --for=condition=Ready ksvc/sample-app --timeout=360s

    - name: Create experiment
      run: |
        export ITER8=$(pwd)

        # Starting the experiment
        kubectl apply -f $ITER8/samples/knative/fixed-split/experiment.yaml

    - name: Wait until end of experiment
      run: |
        export EXPERIMENT=fixedsplit-exp
        # Wait for experiment to complete
        kubectl wait experiment $EXPERIMENT --for=condition=Completed --timeout=300s
        kubectl get experiment $EXPERIMENT -o yaml
    
    - name: Check if experiment is complete and successful
      run: |
        export ITER8=$(pwd)
        export EXPERIMENT=fixedsplit-exp
        source $ITER8/samples/knative/quickstart/check.sh

  race-condition:
    name: testing race conditions with Iter8 metrics
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: engineerd/setup-kind@v0.5.0
      with:
        version: "v0.11.1"    

    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/setup/iter8-setup.sh
        $ITER8/samples/e2e-tests/race-condition/platform-setup.sh

    - name: test race condition
      run: |
        export ITER8=$(pwd)
        export EXPERIMENT=race-condition

        for x in 1 2 3 4 5
        do 
          # Apply metrics
          kubectl apply -f $ITER8/samples/e2e-tests/race-condition/metrics.yaml
          
          # Apply experiment
          kubectl apply -f $ITER8/samples/e2e-tests/race-condition/experiment.yaml
          # Wait for experiment to complete
          kubectl wait experiment $EXPERIMENT --for=condition=Completed --timeout=20s
          # Check experiment results are correct
          source $ITER8/samples/e2e-tests/race-condition/check.sh

          # delete metrics and experiment
          kubectl delete -f $ITER8/samples/e2e-tests/race-condition/metrics.yaml
          kubectl delete -f $ITER8/samples/e2e-tests/race-condition/experiment.yaml
        done

