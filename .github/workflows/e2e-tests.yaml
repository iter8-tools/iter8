name: e2e tests

on:
  push:
    branches:
    - master
    paths:
    - 'install/**'
    - '!install/docker/**'
    - 'samples/knative/**'
    - '.github/workflows/e2e-tests.yaml'
  pull_request:
    paths:
    - 'install/**'
    - '!install/docker/**'
    - 'samples/knative/**'
    - '.github/workflows/e2e-tests.yaml'

jobs:
  quickstart-with-contour:
    name: quickstart experiment with contour
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: engineerd/setup-kind@v0.5.0
      with:
        version: "v0.11.1"

    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/knative/quickstart/iter8-setup.sh
        $ITER8/samples/knative/quickstart/platform-setup.sh contour

    - name: create Knative service and readiness check
      run: |
        export ITER8=$(pwd)
        kubectl apply -f $ITER8/samples/knative/quickstart/baseline.yaml
        kubectl apply -f $ITER8/samples/knative/quickstart/experimentalservice.yaml
        kubectl wait --for=condition=Ready ksvc/sample-app --timeout=240s

    - name: Create experiment
      run: |
        export ITER8=$(pwd)

        # Starting the experiment
        kubectl apply -f $ITER8/samples/knative/quickstart/experiment.yaml

    - name: Sleep until end of experiment
      run: |
        sleep 150.0
        kubectl get experiment quickstart-exp -o yaml
    
    - name: Check if experiment is complete and successful
      run: |
        export ITER8=$(pwd)
        export EXPERIMENT=quickstart-exp
        source $ITER8/samples/knative/quickstart/check.sh

  quickstart-with-kong:
    name: quickstart experiment with kong
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: engineerd/setup-kind@v0.5.0
      with:
        version: "v0.11.1"

    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/knative/quickstart/iter8-setup.sh        
        $ITER8/samples/knative/quickstart/platform-setup.sh kong

    - name: create Knative service and readiness check
      run: |
        export ITER8=$(pwd)
        kubectl apply -f $ITER8/samples/knative/quickstart/baseline.yaml
        kubectl apply -f $ITER8/samples/knative/quickstart/experimentalservice.yaml
        kubectl wait --for=condition=Ready ksvc/sample-app --timeout=240s

    - name: create experiment
      run: |
        export ITER8=$(pwd)

        # Starting the experiment
        kubectl apply -f $ITER8/samples/knative/quickstart/experiment.yaml

    - name: Sleep until end of experiment
      run: |
        sleep 150.0
        kubectl get experiment quickstart-exp -o yaml
    
    - name: Check if experiment is complete and successful
      run: |
        export ITER8=$(pwd)
        export EXPERIMENT=quickstart-exp
        source $ITER8/samples/knative/quickstart/check.sh

  conformance:
    name: conformance experiment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: engineerd/setup-kind@v0.5.0
      with:
        version: "v0.11.1"    

    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/knative/quickstart/iter8-setup.sh
        $ITER8/samples/knative/quickstart/platform-setup.sh contour

    - name: create Knative app
      run: |
        export ITER8=$(pwd)
        kubectl apply -f $ITER8/samples/knative/conformance/baseline.yaml        
        kubectl wait --for=condition=Ready ksvc/sample-app --timeout=240s

    - name: Create Iter8 experiment
      run: |
        export ITER8=$(pwd)

        kubectl apply -f $ITER8/samples/knative/conformance/experiment.yaml

    - name: Sleep until end of experiment
      run: |
        sleep 150.0
        kubectl get experiment conformance-exp -o yaml
    
    - name: Check if experiment is complete and successful
      run: |
        export ITER8=$(pwd)
        source $ITER8/samples/knative/conformance/check.sh
        
  progressive:
    name: progressive experiment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: engineerd/setup-kind@v0.5.0
      with:
        version: "v0.11.1"

    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/knative/quickstart/iter8-setup.sh
        $ITER8/samples/knative/quickstart/platform-setup.sh kourier

    - uses: azure/setup-helm@v1

    - name: RBAC rules for helm
      run: |
        export ITER8=$(pwd)
        kubectl apply -f ${ITER8}/samples/knative/canaryprogressive/helm-rbac.yaml

    - name: create Knative app with canary
      run: |
        export ITER8=$(pwd)
        helm install --repo https://raw.githubusercontent.com/iter8-tools/iter8/master/samples/knative/canaryprogressive/helm-repo sample-app sample-app --namespace=default
        kubectl wait ksvc/sample-app --for=condition=Ready --timeout=240s
        helm upgrade --install --repo https://raw.githubusercontent.com/iter8-tools/iter8/master/samples/knative/canaryprogressive/helm-repo sample-app sample-app --values=https://raw.githubusercontent.com/iter8-tools/iter8/master/samples/knative/canaryprogressive/experimental-values.yaml --namespace=default
        kubectl wait --for=condition=Ready ksvc/sample-app --timeout=240s

    - name: Create Iter8 experiment
      run: |
        export ITER8=$(pwd)

        export ITER8=$(pwd)
        kubectl apply -f $ITER8/samples/knative/canaryprogressive/experiment.yaml

    - name: Sleep until end of experiment
      run: |
        sleep 150.0
        kubectl get experiment canary-progressive -o yaml
    
    - name: Check if experiment is complete and successful
      run: |
        export ITER8=$(pwd)
        source $ITER8/samples/knative/canaryprogressive/check.sh

  fixedsplit:
    name: fixed-split experiment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: engineerd/setup-kind@v0.5.0
      with:
        version: "v0.11.1" 

    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/knative/quickstart/iter8-setup.sh
        $ITER8/samples/knative/quickstart/platform-setup.sh contour

    - name: create Knative service and readiness check
      run: |
        export ITER8=$(pwd)
        kubectl apply -f $ITER8/samples/knative/quickstart/baseline.yaml
        kubectl apply -f $ITER8/samples/knative/fixed-split/experimentalservice.yaml
        kubectl wait --for=condition=Ready ksvc/sample-app --timeout=240s

    - name: Create experiment
      run: |
        export ITER8=$(pwd)

        # Starting the experiment
        kubectl apply -f $ITER8/samples/knative/fixed-split/experiment.yaml

    - name: Sleep until end of experiment
      run: |
        sleep 150.0
        kubectl get experiment fixedsplit-exp -o yaml
    
    - name: Check if experiment is complete and successful
      run: |
        export ITER8=$(pwd)
        export EXPERIMENT=fixedsplit-exp
        source $ITER8/samples/knative/quickstart/check.sh

  canary-fixedsplit-kustomize:
    name: fixedsplit canary experiment with kustomize
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: engineerd/setup-kind@v0.5.0
      with:
        version: "v0.11.1"    

    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/knative/quickstart/iter8-setup.sh
        $ITER8/samples/knative/quickstart/platform-setup.sh contour

    - name: create Knative app with canary
      run: |
        export ITER8=$(pwd)
        kustomize build $ITER8/samples/knative/canaryfixedsplit/baseline | kubectl apply -f -
        kubectl wait ksvc/sample-app --for=condition=Ready --timeout=240s
        kustomize build $ITER8/samples/knative/canaryfixedsplit/experimentalservice | kubectl apply -f -        

    - name: Create Iter8 experiment
      run: |
        export ITER8=$(pwd)

        kubectl apply -f $ITER8/samples/knative/canaryfixedsplit/experiment.yaml

    - name: Sleep until end of experiment
      run: |
        sleep 150.0
        kubectl get experiment canary-fixedsplit -o yaml
    
    - name: Check if experiment is complete and successful
      run: |
        export ITER8=$(pwd)
        source $ITER8/samples/knative/canaryfixedsplit/check.sh

  race-condition:
    name: testing race conditions with Iter8 metrics
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: engineerd/setup-kind@v0.5.0
      with:
        version: "v0.11.1"    

    - name: platform setup
      run: |
        export ITER8=$(pwd)
        $ITER8/samples/knative/quickstart/iter8-setup.sh
        $ITER8/samples/e2e-tests/race-condition/platform-setup.sh

    - name: test race condition
      run: |
        export ITER8=$(pwd)
        export EXPERIMENT=race-condition

        for x in 1 2 3 4 5
        do 
          # Apply metrics
          kubectl apply -f $ITER8/samples/e2e-tests/race-condition/metrics.yaml
          
          # Apply experiment
          kubectl apply -f $ITER8/samples/e2e-tests/race-condition/experiment.yaml
          # Wait for experiment to complete
          kubectl wait experiment $EXPERIMENT --for=condition=Completed --timeout=20s
          # Check experiment results are correct
          source $ITER8/samples/e2e-tests/race-condition/check.sh

          # delete metrics and experiment
          kubectl delete -f $ITER8/samples/e2e-tests/race-condition/metrics.yaml
          kubectl delete -f $ITER8/samples/e2e-tests/race-condition/experiment.yaml
        done

